{"version":3,"sources":["spacex-logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","classNames","text-success","text-danger","dist_default","format","Link","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","react","react_apollo_browser_umd","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch_templateObject","Launch","this","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","ClassNames","client","ApolloClient","uri","App","BrowserRouter","src","logo","alt","style","width","display","margin","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a692d981.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spacex-logo.7e208dfe.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\n\nexport default function LaunchItem({\n  launch: {\n    flight_number,\n    mission_name,\n    launch_date_local,\n    launch_success  }\n}) {\n  return(\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>Mission:{' '}\n            <span\n              className={ classNames({ 'text-success': launch_success, 'text-danger': !launch_success }) }>\n              { mission_name }\n            </span>\n          </h4>\n          <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment></p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${ flight_number }`} className=\"btn btn-secondary\">\n            Launch Details\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n};\n\n// <h4>{ flight_number }:</h4>\n// <p>{ mission_name }</p>\n// <p>{ launch_date_local }</p>\n// <p>{ launch_success }</p>\n","import React from 'react';\n\nexport default function MissionKey() {\n  return(\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\" /> = Failure\n      </p>\n    </div>\n  )\n};\n","import React, { Component, Fragment } from 'react';\nimport gql from \"graphql-tag\";\nimport { Query } from 'react-apollo';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\n// Query for \"Launches\" component (stored in var for convience)\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      # Desired data to be returned\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nclass Launches extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className=\"display-4 my-3\">Launches</h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n          {\n            ({ loading, error, data }) => {\n              if(loading) return <h4>Loading...</h4>;\n              if(error) return console.log(error);\n\n              return (\n                <Fragment>\n                  { data.launches.map(launch => (\n                    <LaunchItem\n                      key={ launch.flight_number }\n                      launch={ launch } />\n                  )) }\n                </Fragment>\n              );\n            }\n          }\n        </Query>\n      </Fragment>\n    );\n  }\n\n}\n\nexport default Launches;\n","import React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Query } from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport ClassNames from 'classnames';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nclass Launch extends Component {\n\n  render() {\n    let { flight_number } = this.props.match.params;\n    flight_number = parseInt(flight_number);\n    return (\n      <Fragment>\n        {/* The \"variables\" property uses double \"{}\" because the value is an Object */}\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n          {\n            ({ loading, error, data }) => {\n              if(loading) return <h4>Loading...</h4>;\n              if(error) return console.log(error);\n\n              const { flight_number, mission_name, launch_year, launch_success, rocket: { rocket_id, rocket_name, rocket_type } } = data.launch;\n\n              return(\n                <div className=\"container\">\n                  <h1 className=\"display-4 my-3\">\n                    <span className=\"text-dark\">Mission:</span>{' '} { mission_name }\n                  </h1>\n                  <h4 className=\"mb-3\">Launch Details</h4>\n                  <ul className=\"list-group\">\n                    <li\n                      className=\"list-group-item\"\n                      key={ flight_number }>\n                      Flight Number: { flight_number }\n                    </li>\n                    <li\n                      className=\"list-group-item\"\n                      key={ launch_year }>\n                      Launch Year: { launch_year }\n                    </li>\n                    <li\n                      className=\"list-group-item\"\n                      key={ launch_success }>\n                      Launch Successful:{' '}\n                      <span\n                        className={ ClassNames({\n                          'text-success': launch_success,\n                          'text-danger': !launch_success\n                        }) }>\n                        { launch_success ? 'Yes' : 'No' }\n                      </span>\n                    </li>\n                  </ul>\n                  <h4 className=\"my-3\">Rocket Details</h4>\n                  <ul className=\"list-group\">\n                    <li className=\"list-group-item\">\n                      Rocket ID: { rocket_id }\n                    </li>\n                    <li className=\"list-group-item\">\n                      Rocket Name: { rocket_name }\n                    </li>\n                    <li className=\"list-group-item\">\n                      Rocket Type: { rocket_type }\n                    </li>\n                  </ul>\n                  <hr/>\n                  <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n                </div>\n              )\n            }\n          }\n        </Query>\n      </Fragment>\n    );\n  }\n\n}\n\nexport default Launch;\n","import React, { Component } from 'react';\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport logo from \"./spacex-logo.png\";\nimport './App.css';\n\nconst client = new ApolloClient({\n  // The URI for Heroku deployment\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={ client }>\n        <Router>\n          <div className=\"container\">\n            <img\n              src={ logo }\n              alt=\"SpaceX\"\n              style={{ width: 300, display: \"block\", margin: \"auto\" }}\n            />\n            <Route exact path=\"/\" component={ Launches } />\n            <Route exact path=\"/launch/:flight_number\" component={ Launch } />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}